{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport api from \"../interceptor\";\nimport { useNavigate } from \"react-router-dom\";\nconst useInterceptors = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const navigator = useNavigate();\n  let [isValid, setIsvalid] = useState(false);\n  useEffect(() => {\n    const axiosRequestInterceptor = api.interceptors.request.use(config => {\n      const token = localStorage.getItem('token'); // Ваш токен аутентификации\n      //console.log(token)\n      config.headers.Authorization = `Bearer ${token}`; // Добавление заголовка Authorization\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n    const axiosResponseInterceptor = api.interceptors.response.use(response => response, error => {\n      if (error.response.status === 401) {\n        // Если статус код 401 (несанкционированный доступ), то можно выполнить логаут пользователя\n        localStorage.clear(); // Очищаем хранилище токена или других авторизационных данных\n        if (window.location.pathname !== \"/\") {\n          //setIsvalid(false)\n          // window.stop()\n          // window.location.href = \"/\"\n          navigator(\"/\");\n        }\n      }\n      if (error.response.status === 406) {\n        // window.stop()\n        // window.location.href = \"/error_page?statusCode=406&errorMessage=Эта страница недоступна для Вас. Попробуйте авторизоваться с данными от Диниса Рафиковича\"\n        //setIsvalid(faslse)\n        navigator(\"/error_page\");\n      }\n      return Promise.reject(error);\n    });\n    return () => {\n      api.interceptors.request.eject(axiosRequestInterceptor);\n      api.interceptors.response.eject(axiosResponseInterceptor);\n    };\n    setIsvalid(true);\n  }, [navigator]);\n  return isValid && children;\n};\n_s(useInterceptors, \"5Xubc29wA7fvkGF9C0MfBUFj5+4=\", false, function () {\n  return [useNavigate];\n});\nexport default useInterceptors;","map":{"version":3,"names":["useEffect","useState","api","useNavigate","useInterceptors","_ref","_s","children","navigator","isValid","setIsvalid","axiosRequestInterceptor","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","axiosResponseInterceptor","response","status","clear","window","location","pathname","eject"],"sources":["C:/Users/Розалия/Desktop/RILI_meta/front_end/src/hooks/UseInterceptor.js"],"sourcesContent":["import {useEffect, useState} from \"react\";\r\nimport api from \"../interceptor\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n\r\nconst useInterceptors = ({children})=>{\r\n    const navigator = useNavigate()\r\n    let [isValid, setIsvalid] = useState(false)\r\n    useEffect(()=>{\r\n        const axiosRequestInterceptor = api.interceptors.request.use(config => {\r\n                 const token =  localStorage.getItem('token')// Ваш токен аутентификации\r\n                 //console.log(token)\r\n                 config.headers.Authorization = `Bearer ${token}` // Добавление заголовка Authorization\r\n                 return config\r\n               }, error => {\r\n                 return Promise.reject(error)\r\n               })\r\n        const axiosResponseInterceptor =  api.interceptors.response.use(\r\n               (response) => response,\r\n               (error) => {\r\n                 if (error.response.status === 401) {\r\n                   // Если статус код 401 (несанкционированный доступ), то можно выполнить логаут пользователя\r\n                   localStorage.clear(); // Очищаем хранилище токена или других авторизационных данных\r\n                   if(window.location.pathname !== \"/\"){\r\n                    //setIsvalid(false)\r\n                     // window.stop()\r\n                     // window.location.href = \"/\"\r\n                     navigator(\"/\")\r\n                   }\r\n               }\r\n               if (error.response.status === 406) {\r\n                 // window.stop()\r\n                 // window.location.href = \"/error_page?statusCode=406&errorMessage=Эта страница недоступна для Вас. Попробуйте авторизоваться с данными от Диниса Рафиковича\"\r\n                 //setIsvalid(faslse)\r\n                 navigator(\"/error_page\")\r\n               }\r\n               return Promise.reject(error)\r\n            \r\n             })\r\n             return () => {\r\n                api.interceptors.request.eject(axiosRequestInterceptor)\r\n                api.interceptors.response.eject(axiosResponseInterceptor)\r\n              }\r\n              setIsvalid(true)\r\n        },[navigator])\r\n\r\n    return isValid && children\r\n}\r\n\r\nexport default useInterceptors"],"mappings":";AAAA,SAAQA,SAAS,EAAEC,QAAQ,QAAO,OAAO;AACzC,OAAOC,GAAG,MAAM,gBAAgB;AAChC,SAASC,WAAW,QAAQ,kBAAkB;AAG9C,MAAMC,eAAe,GAAGC,IAAA,IAAc;EAAAC,EAAA;EAAA,IAAb;IAACC;EAAQ,CAAC,GAAAF,IAAA;EAC/B,MAAMG,SAAS,GAAGL,WAAW,CAAC,CAAC;EAC/B,IAAI,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC3CD,SAAS,CAAC,MAAI;IACV,MAAMW,uBAAuB,GAAGT,GAAG,CAACU,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;MAC9D,MAAMC,KAAK,GAAIC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC5C;MACAH,MAAM,CAACI,OAAO,CAACC,aAAa,GAAI,UAASJ,KAAM,EAAC,EAAC;MACjD,OAAOD,MAAM;IACf,CAAC,EAAEM,KAAK,IAAI;MACV,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;IAC9B,CAAC,CAAC;IACT,MAAMG,wBAAwB,GAAItB,GAAG,CAACU,YAAY,CAACa,QAAQ,CAACX,GAAG,CACvDW,QAAQ,IAAKA,QAAQ,EACrBJ,KAAK,IAAK;MACT,IAAIA,KAAK,CAACI,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;QACjC;QACAT,YAAY,CAACU,KAAK,CAAC,CAAC,CAAC,CAAC;QACtB,IAAGC,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,GAAG,EAAC;UACnC;UACC;UACA;UACAtB,SAAS,CAAC,GAAG,CAAC;QAChB;MACJ;MACA,IAAIa,KAAK,CAACI,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;QACjC;QACA;QACA;QACAlB,SAAS,CAAC,aAAa,CAAC;MAC1B;MACA,OAAOc,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;IAE9B,CAAC,CAAC;IACF,OAAO,MAAM;MACVnB,GAAG,CAACU,YAAY,CAACC,OAAO,CAACkB,KAAK,CAACpB,uBAAuB,CAAC;MACvDT,GAAG,CAACU,YAAY,CAACa,QAAQ,CAACM,KAAK,CAACP,wBAAwB,CAAC;IAC3D,CAAC;IACDd,UAAU,CAAC,IAAI,CAAC;EACtB,CAAC,EAAC,CAACF,SAAS,CAAC,CAAC;EAElB,OAAOC,OAAO,IAAIF,QAAQ;AAC9B,CAAC;AAAAD,EAAA,CA1CKF,eAAe;EAAA,QACCD,WAAW;AAAA;AA2CjC,eAAeC,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}