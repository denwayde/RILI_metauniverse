{"ast":null,"code":"import axios from \"axios\";\n//import dotenv from \"dotenv\"\nimport { useNavigate } from \"react-router-dom\";\nconst api = axios.create({\n  baseURL: \"http://localhost:5000/rili_api/\"\n});\n\n// Добавление интерцептора для каждого запроса\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token'); // Ваш токен аутентификации\n  console.log(token);\n  config.headers.Authorization = `Bearer ${token}`; // Добавление заголовка Authorization\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// api.interceptors.response.use(\n//   (response) => response,\n//   (error) => {\n//     const navigateTo = useNavigate()\n//     if (error.response) {\n//       // Ошибка пришла от сервера (например, статус код не 2xx)\n//       //console.error('Ошибка от сервера:', error.response.data);\n//       navigateTo(\"/error_page\", {state: {stsCode: 502, errMessage: `Ошибка от сервера: ${error.response.data}`}})\n//         // Можно добавить здесь логику обработки конкретных ошибок, если нужно\n\n//       if (error.response.status === 401) {\n//         // Если статус код 401 (несанкционированный доступ), то можно выполнить логаут пользователя\n//         localStorage.clear(); // Очищаем хранилище токена или других авторизационных данных\n//         if(window.location.pathname !== \"/\"){\n//           //window.location.href = \"http://localhost:3000\"\n//           navigateTo(\"/\")\n//         }\n//       }\n//       else if(error.response.status === 406){\n//         navigateTo(\"/error_page\", {state: {stsCode: 406, errMessage: `Эта страница недоступна для Вас`}})\n//       }\n//     } else if (error.request) {\n//       // Ошибка связанная с запросом (например, не удалось доставить запрос)\n//       //console.error('Ошибка запроса:', error.request);\n//       navigateTo(\"/error_page\", {state: {stsCode: 400, errMessage: `Ошибка запроса: ${error.request}`}})\n//     } else {\n//       // Другие ошибки\n//       //console.error('Ошибка:', error.message);\n//       navigateTo(\"/error_page\", {state: {stsCode: 400, errMessage: `Ошибка: ${error.message}`}})\n//     }\n\n//     return Promise.reject(error);\n//   }\n// )\n\nexport default api;","map":{"version":3,"names":["axios","useNavigate","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","console","log","headers","Authorization","error","Promise","reject"],"sources":["C:/Users/Розалия/Desktop/RILI_meta/front_end/src/interceptor.js"],"sourcesContent":["import axios from \"axios\"\r\n//import dotenv from \"dotenv\"\r\nimport {useNavigate} from \"react-router-dom\"\r\n\r\nconst api = axios.create({\r\n    baseURL: \"http://localhost:5000/rili_api/\"\r\n})\r\n\r\n// Добавление интерцептора для каждого запроса\r\napi.interceptors.request.use(config => {\r\n    const token =  localStorage.getItem('token')// Ваш токен аутентификации\r\n    console.log(token)\r\n    config.headers.Authorization = `Bearer ${token}` // Добавление заголовка Authorization\r\n    return config\r\n  }, error => {\r\n    return Promise.reject(error)\r\n  })\r\n\r\n\r\n\r\n// api.interceptors.response.use(\r\n//   (response) => response,\r\n//   (error) => {\r\n//     const navigateTo = useNavigate()\r\n//     if (error.response) {\r\n//       // Ошибка пришла от сервера (например, статус код не 2xx)\r\n//       //console.error('Ошибка от сервера:', error.response.data);\r\n//       navigateTo(\"/error_page\", {state: {stsCode: 502, errMessage: `Ошибка от сервера: ${error.response.data}`}})\r\n//         // Можно добавить здесь логику обработки конкретных ошибок, если нужно\r\n\r\n//       if (error.response.status === 401) {\r\n//         // Если статус код 401 (несанкционированный доступ), то можно выполнить логаут пользователя\r\n//         localStorage.clear(); // Очищаем хранилище токена или других авторизационных данных\r\n//         if(window.location.pathname !== \"/\"){\r\n//           //window.location.href = \"http://localhost:3000\"\r\n//           navigateTo(\"/\")\r\n//         }\r\n//       }\r\n//       else if(error.response.status === 406){\r\n//         navigateTo(\"/error_page\", {state: {stsCode: 406, errMessage: `Эта страница недоступна для Вас`}})\r\n//       }\r\n//     } else if (error.request) {\r\n//       // Ошибка связанная с запросом (например, не удалось доставить запрос)\r\n//       //console.error('Ошибка запроса:', error.request);\r\n//       navigateTo(\"/error_page\", {state: {stsCode: 400, errMessage: `Ошибка запроса: ${error.request}`}})\r\n//     } else {\r\n//       // Другие ошибки\r\n//       //console.error('Ошибка:', error.message);\r\n//       navigateTo(\"/error_page\", {state: {stsCode: 400, errMessage: `Ошибка: ${error.message}`}})\r\n//     }\r\n    \r\n//     return Promise.reject(error);\r\n//   }\r\n// )\r\n\r\n  export default api"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA,SAAQC,WAAW,QAAO,kBAAkB;AAE5C,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACrBC,OAAO,EAAE;AACb,CAAC,CAAC;;AAEF;AACAF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EACnC,MAAMC,KAAK,GAAIC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC5CC,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;EAClBD,MAAM,CAACM,OAAO,CAACC,aAAa,GAAI,UAASN,KAAM,EAAC,EAAC;EACjD,OAAOD,MAAM;AACf,CAAC,EAAEQ,KAAK,IAAI;EACV,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;;AAIJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEE,eAAed,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}