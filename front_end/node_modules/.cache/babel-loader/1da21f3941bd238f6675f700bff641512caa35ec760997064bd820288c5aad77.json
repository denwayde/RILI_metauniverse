{"ast":null,"code":"import axios from \"axios\";\n//import dotenv from \"dotenv\"\n\nconst api = axios.create({\n  baseURL: \"http://localhost:5000/rili_api/\"\n});\n\n// Добавление интерцептора для каждого запроса\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token'); // Ваш токен аутентификации\n  config.headers.Authorization = `Bearer ${token}`; // Добавление заголовка Authorization\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\napi.interceptors.response.use(response => response, error => {\n  if (error.response) {\n    // Ошибка пришла от сервера (например, статус код не 2xx)\n    console.error('Ошибка от сервера:', error.response.data);\n\n    // Можно добавить здесь логику обработки конкретных ошибок, если нужно\n\n    if (error.response.status === 401) {\n      // Если статус код 401 (несанкционированный доступ), то можно выполнить логаут пользователя\n      localStorage.clear(); // Очищаем хранилище токена или других авторизационных данных\n      if (window.location.pathname !== \"/\") {\n        window.location.href = \"http://localhost:3000\";\n      }\n    }\n  } else if (error.request) {\n    // Ошибка связанная с запросом (например, не удалось доставить запрос)\n    console.error('Ошибка запроса:', error.request);\n  } else {\n    // Другие ошибки\n    console.error('Ошибка:', error.message);\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","console","data","status","clear","window","location","pathname","href","message"],"sources":["C:/Users/Розалия/Desktop/RILI_meta/front_end/src/interceptor.js"],"sourcesContent":["import axios from \"axios\"\r\n//import dotenv from \"dotenv\"\r\n\r\n\r\nconst api = axios.create({\r\n    baseURL: \"http://localhost:5000/rili_api/\"\r\n})\r\n\r\n// Добавление интерцептора для каждого запроса\r\napi.interceptors.request.use(config => {\r\n    const token =  localStorage.getItem('token')// Ваш токен аутентификации\r\n    config.headers.Authorization = `Bearer ${token}` // Добавление заголовка Authorization\r\n    return config\r\n  }, error => {\r\n    return Promise.reject(error)\r\n  })\r\n  \r\n\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response) {\r\n      // Ошибка пришла от сервера (например, статус код не 2xx)\r\n      console.error('Ошибка от сервера:', error.response.data);\r\n      \r\n        // Можно добавить здесь логику обработки конкретных ошибок, если нужно\r\n\r\n      if (error.response.status === 401) {\r\n        // Если статус код 401 (несанкционированный доступ), то можно выполнить логаут пользователя\r\n        localStorage.clear(); // Очищаем хранилище токена или других авторизационных данных\r\n        if(window.location.pathname !== \"/\"){\r\n          window.location.href = \"http://localhost:3000\"\r\n        }\r\n         \r\n      }\r\n    } else if (error.request) {\r\n      // Ошибка связанная с запросом (например, не удалось доставить запрос)\r\n      console.error('Ошибка запроса:', error.request);\r\n    } else {\r\n      // Другие ошибки\r\n      console.error('Ошибка:', error.message);\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n)\r\n\r\n  export default api"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;;AAGA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACrBC,OAAO,EAAE;AACb,CAAC,CAAC;;AAEF;AACAF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EACnC,MAAMC,KAAK,GAAIC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC5CH,MAAM,CAACI,OAAO,CAACC,aAAa,GAAI,UAASJ,KAAM,EAAC,EAAC;EACjD,OAAOD,MAAM;AACf,CAAC,EAAEM,KAAK,IAAI;EACV,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;AAGJZ,GAAG,CAACG,YAAY,CAACY,QAAQ,CAACV,GAAG,CAC1BU,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EACT,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAClB;IACAC,OAAO,CAACJ,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACG,QAAQ,CAACE,IAAI,CAAC;;IAEtD;;IAEF,IAAIL,KAAK,CAACG,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;MACjC;MACAV,YAAY,CAACW,KAAK,CAAC,CAAC,CAAC,CAAC;MACtB,IAAGC,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,GAAG,EAAC;QAClCF,MAAM,CAACC,QAAQ,CAACE,IAAI,GAAG,uBAAuB;MAChD;IAEF;EACF,CAAC,MAAM,IAAIX,KAAK,CAACR,OAAO,EAAE;IACxB;IACAY,OAAO,CAACJ,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAACR,OAAO,CAAC;EACjD,CAAC,MAAM;IACL;IACAY,OAAO,CAACJ,KAAK,CAAC,SAAS,EAAEA,KAAK,CAACY,OAAO,CAAC;EACzC;EAEA,OAAOX,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAEC,eAAeZ,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}