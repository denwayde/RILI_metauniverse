{"ast":null,"code":"import axios from \"axios\";\n//import dotenv from \"dotenv\"\nimport { redirect } from \"react-router-dom\";\nconst api = axios.create({\n  baseURL: \"http://localhost:5000/rili_api/\"\n});\n\n// Добавление интерцептора для каждого запроса\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token'); // Ваш токен аутентификации\n  console.log(token);\n  config.headers.Authorization = `Bearer ${token}`; // Добавление заголовка Authorization\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\napi.interceptors.response.use(response => response, error => {\n  console.log(error.response.status);\n  if (error.response.status === 401) {\n    // Если статус код 401 (несанкционированный доступ), то можно выполнить логаут пользователя\n    localStorage.clear(); // Очищаем хранилище токена или других авторизационных данных\n    if (window.location.pathname !== \"/\") {\n      //window.location.href = \"http://localhost:3000\"\n      //navigateTo(\"/\")\n      redirect(\"/\");\n      //return Promise.reject(error)\n    }\n    // return Promise.reject(error);\n  }\n\n  if (error.response.status === 406) {\n    // navigateTo(\"/error_page\", {state: {statusCode: 406, errorMessage: \"Эта страница недоступна для Вас. Попробуйте авторизоваться с данными от Диниса Рафиковича\"}})\n    redirect(\"/error_page\");\n    //return Promise.reject(error)\n  }\n});\n\nexport default api;","map":{"version":3,"names":["axios","redirect","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","console","log","headers","Authorization","error","Promise","reject","response","status","clear","window","location","pathname"],"sources":["C:/Users/Розалия/Desktop/RILI_meta/front_end/src/interceptor.js"],"sourcesContent":["import axios from \"axios\"\r\n//import dotenv from \"dotenv\"\r\nimport {redirect} from \"react-router-dom\"\r\n\r\n\r\nconst api = axios.create({\r\n    baseURL: \"http://localhost:5000/rili_api/\"\r\n})\r\n\r\n// Добавление интерцептора для каждого запроса\r\napi.interceptors.request.use(config => {\r\n    const token =  localStorage.getItem('token')// Ваш токен аутентификации\r\n    console.log(token)\r\n    config.headers.Authorization = `Bearer ${token}` // Добавление заголовка Authorization\r\n    return config\r\n  }, error => {\r\n    return Promise.reject(error)\r\n  })\r\n\r\n\r\n\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    console.log(error.response.status)\r\n    \r\n    if (error.response.status === 401) {\r\n      // Если статус код 401 (несанкционированный доступ), то можно выполнить логаут пользователя\r\n      localStorage.clear(); // Очищаем хранилище токена или других авторизационных данных\r\n      if(window.location.pathname !== \"/\"){\r\n        //window.location.href = \"http://localhost:3000\"\r\n        //navigateTo(\"/\")\r\n        redirect(\"/\")\r\n        //return Promise.reject(error)\r\n      }\r\n    // return Promise.reject(error);\r\n  }\r\n  if (error.response.status === 406) {\r\n    // navigateTo(\"/error_page\", {state: {statusCode: 406, errorMessage: \"Эта страница недоступна для Вас. Попробуйте авторизоваться с данными от Диниса Рафиковича\"}})\r\n    redirect(\"/error_page\")\r\n    //return Promise.reject(error)\r\n  }\r\n\r\n})\r\n\r\n  export default api"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA,SAAQC,QAAQ,QAAO,kBAAkB;AAGzC,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACrBC,OAAO,EAAE;AACb,CAAC,CAAC;;AAEF;AACAF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EACnC,MAAMC,KAAK,GAAIC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC5CC,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;EAClBD,MAAM,CAACM,OAAO,CAACC,aAAa,GAAI,UAASN,KAAM,EAAC,EAAC;EACjD,OAAOD,MAAM;AACf,CAAC,EAAEQ,KAAK,IAAI;EACV,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;AAIJd,GAAG,CAACG,YAAY,CAACc,QAAQ,CAACZ,GAAG,CAC1BY,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EACTJ,OAAO,CAACC,GAAG,CAACG,KAAK,CAACG,QAAQ,CAACC,MAAM,CAAC;EAElC,IAAIJ,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACjC;IACAV,YAAY,CAACW,KAAK,CAAC,CAAC,CAAC,CAAC;IACtB,IAAGC,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,GAAG,EAAC;MAClC;MACA;MACAvB,QAAQ,CAAC,GAAG,CAAC;MACb;IACF;IACF;EACF;;EACA,IAAIe,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACjC;IACAnB,QAAQ,CAAC,aAAa,CAAC;IACvB;EACF;AAEF,CAAC,CAAC;;AAEA,eAAeC,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}