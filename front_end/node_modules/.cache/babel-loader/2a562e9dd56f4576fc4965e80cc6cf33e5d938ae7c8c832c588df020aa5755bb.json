{"ast":null,"code":"var _s = $RefreshSig$();\nimport axios from \"axios\";\n//import dotenv from \"dotenv\"\nimport { useNavigate } from \"react-router-dom\";\nconst api = axios.create({\n  baseURL: \"http://localhost:5000/rili_api/\"\n});\n\n// Добавление интерцептора для каждого запроса\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token'); // Ваш токен аутентификации\n  config.headers.Authorization = `Bearer ${token}`; // Добавление заголовка Authorization\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n_s(api.interceptors.response.use(response => response, _s(error => {\n  _s();\n  if (window.location.pathname !== \"/\") {\n    const navigateTo = useNavigate();\n    if (error.response) {\n      // Ошибка пришла от сервера (например, статус код не 2xx)\n      //console.error('Ошибка от сервера:', error.response.data);\n      navigateTo(\"/error_page\", {\n        state: {\n          stsCode: 502,\n          errMessage: `Ошибка от сервера: ${error.response.data}`\n        }\n      });\n      // Можно добавить здесь логику обработки конкретных ошибок, если нужно\n\n      if (error.response.status === 401) {\n        // Если статус код 401 (несанкционированный доступ), то можно выполнить логаут пользователя\n        localStorage.clear(); // Очищаем хранилище токена или других авторизационных данных\n        if (window.location.pathname !== \"/\") {\n          //window.location.href = \"http://localhost:3000\"\n          navigateTo(\"/\");\n        }\n      } else if (error.response.status === 406) {\n        navigateTo(\"/error_page\", {\n          state: {\n            stsCode: 406,\n            errMessage: `Эта страница недоступна для Вас`\n          }\n        });\n      }\n    } else if (error.request) {\n      // Ошибка связанная с запросом (например, не удалось доставить запрос)\n      //console.error('Ошибка запроса:', error.request);\n      navigateTo(\"/error_page\", {\n        state: {\n          stsCode: 400,\n          errMessage: `Ошибка запроса: ${error.request}`\n        }\n      });\n    } else {\n      // Другие ошибки\n      //console.error('Ошибка:', error.message);\n      navigateTo(\"/error_page\", {\n        state: {\n          stsCode: 400,\n          errMessage: `Ошибка: ${error.message}`\n        }\n      });\n    }\n    return Promise.reject(error);\n  }\n}, \"ymtrZ8G6aCOC+j9g/5vfaOOqM8M=\", false, function () {\n  return [useNavigate];\n})), \"ymtrZ8G6aCOC+j9g/5vfaOOqM8M=\", false, function () {\n  return [useNavigate];\n});\nexport default api;","map":{"version":3,"names":["axios","useNavigate","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","_s","response","window","location","pathname","navigateTo","state","stsCode","errMessage","data","status","clear","message"],"sources":["C:/Users/Розалия/Desktop/RILI_meta/front_end/src/interceptor.js"],"sourcesContent":["import axios from \"axios\"\r\n//import dotenv from \"dotenv\"\r\nimport {useNavigate} from \"react-router-dom\"\r\n\r\nconst api = axios.create({\r\n    baseURL: \"http://localhost:5000/rili_api/\"\r\n})\r\n\r\n// Добавление интерцептора для каждого запроса\r\napi.interceptors.request.use(config => {\r\n    const token =  localStorage.getItem('token')// Ваш токен аутентификации\r\n    config.headers.Authorization = `Bearer ${token}` // Добавление заголовка Authorization\r\n    return config\r\n  }, error => {\r\n    return Promise.reject(error)\r\n  })\r\n\r\n\r\n\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if(window.location.pathname!==\"/\"){\r\n      const navigateTo = useNavigate()\r\n      if (error.response) {\r\n        // Ошибка пришла от сервера (например, статус код не 2xx)\r\n        //console.error('Ошибка от сервера:', error.response.data);\r\n        navigateTo(\"/error_page\", {state: {stsCode: 502, errMessage: `Ошибка от сервера: ${error.response.data}`}})\r\n          // Можно добавить здесь логику обработки конкретных ошибок, если нужно\r\n  \r\n        if (error.response.status === 401) {\r\n          // Если статус код 401 (несанкционированный доступ), то можно выполнить логаут пользователя\r\n          localStorage.clear(); // Очищаем хранилище токена или других авторизационных данных\r\n          if(window.location.pathname !== \"/\"){\r\n            //window.location.href = \"http://localhost:3000\"\r\n            navigateTo(\"/\")\r\n          }\r\n        }\r\n        else if(error.response.status === 406){\r\n          navigateTo(\"/error_page\", {state: {stsCode: 406, errMessage: `Эта страница недоступна для Вас`}})\r\n        }\r\n      } else if (error.request) {\r\n        // Ошибка связанная с запросом (например, не удалось доставить запрос)\r\n        //console.error('Ошибка запроса:', error.request);\r\n        navigateTo(\"/error_page\", {state: {stsCode: 400, errMessage: `Ошибка запроса: ${error.request}`}})\r\n      } else {\r\n        // Другие ошибки\r\n        //console.error('Ошибка:', error.message);\r\n        navigateTo(\"/error_page\", {state: {stsCode: 400, errMessage: `Ошибка: ${error.message}`}})\r\n      }\r\n      \r\n      return Promise.reject(error);\r\n    }\r\n    }\r\n    \r\n)\r\n\r\n  export default api"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA,SAAQC,WAAW,QAAO,kBAAkB;AAE5C,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACrBC,OAAO,EAAE;AACb,CAAC,CAAC;;AAEF;AACAF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EACnC,MAAMC,KAAK,GAAIC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC5CH,MAAM,CAACI,OAAO,CAACC,aAAa,GAAI,UAASJ,KAAM,EAAC,EAAC;EACjD,OAAOD,MAAM;AACf,CAAC,EAAEM,KAAK,IAAI;EACV,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;AAIJG,EAAA,CAAAf,GAAG,CAACG,YAAY,CAACa,QAAQ,CAACX,GAAG,CAC1BW,QAAQ,IAAKA,QAAQ,EAAAD,EAAA,CACrBH,KAAK,IAAK;EAAAG,EAAA;EACT,IAAGE,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAG,GAAG,EAAC;IAChC,MAAMC,UAAU,GAAGrB,WAAW,CAAC,CAAC;IAChC,IAAIa,KAAK,CAACI,QAAQ,EAAE;MAClB;MACA;MACAI,UAAU,CAAC,aAAa,EAAE;QAACC,KAAK,EAAE;UAACC,OAAO,EAAE,GAAG;UAAEC,UAAU,EAAG,sBAAqBX,KAAK,CAACI,QAAQ,CAACQ,IAAK;QAAC;MAAC,CAAC,CAAC;MACzG;;MAEF,IAAIZ,KAAK,CAACI,QAAQ,CAACS,MAAM,KAAK,GAAG,EAAE;QACjC;QACAjB,YAAY,CAACkB,KAAK,CAAC,CAAC,CAAC,CAAC;QACtB,IAAGT,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,GAAG,EAAC;UAClC;UACAC,UAAU,CAAC,GAAG,CAAC;QACjB;MACF,CAAC,MACI,IAAGR,KAAK,CAACI,QAAQ,CAACS,MAAM,KAAK,GAAG,EAAC;QACpCL,UAAU,CAAC,aAAa,EAAE;UAACC,KAAK,EAAE;YAACC,OAAO,EAAE,GAAG;YAAEC,UAAU,EAAG;UAAgC;QAAC,CAAC,CAAC;MACnG;IACF,CAAC,MAAM,IAAIX,KAAK,CAACR,OAAO,EAAE;MACxB;MACA;MACAgB,UAAU,CAAC,aAAa,EAAE;QAACC,KAAK,EAAE;UAACC,OAAO,EAAE,GAAG;UAAEC,UAAU,EAAG,mBAAkBX,KAAK,CAACR,OAAQ;QAAC;MAAC,CAAC,CAAC;IACpG,CAAC,MAAM;MACL;MACA;MACAgB,UAAU,CAAC,aAAa,EAAE;QAACC,KAAK,EAAE;UAACC,OAAO,EAAE,GAAG;UAAEC,UAAU,EAAG,WAAUX,KAAK,CAACe,OAAQ;QAAC;MAAC,CAAC,CAAC;IAC5F;IAEA,OAAOd,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;EAC9B;AACA,CAAC;EAAA,QA9BoBb,WAAW;AAAA,EAgCpC,CAAC;EAAA,QAhCwBA,WAAW;AAAA;AAkClC,eAAeC,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}